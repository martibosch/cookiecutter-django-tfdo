name: Plan

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: [ "staging" ]
    paths-ignore: [ "docs/**" ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  secrets-base:
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'staging' || github.event.pull_request.base.ref == 'main' }}
    steps:

      - name: Create secret files
        env:
          PRODUCTION_DJANGO: ${{ secrets.PRODUCTION_DJANGO }}
          PRODUCTION_POSTGRES: ${{ secrets.PRODUCTION_POSTGRES }}
          PRODUCTION_TRAEFIK: ${{ secrets.PRODUCTION_TRAEFIK }}
        run: |
          echo $PRODUCTION_DJANGO | base64 -di > .django
          echo $PRODUCTION_POSTGRES | base64 -di > .postgres
          echo $PRODUCTION_TRAEFIK | base64 -di > .traefik

      - uses: actions/upload-artifact@v2
        with:
          name: production-django
          path: .django

      - uses: actions/upload-artifact@v2
        with:
          name: production-postgres
          path: .postgres

      - uses: actions/upload-artifact@v2
        with:
          name: production-traefik
          path: .traefik

  secrets-staging:
    needs: secrets-base
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'staging' }}
    steps:

      - name: Create secret files
        env:
          STAGING_DJANGO: ${{ secrets.STAGING_DJANGO }}
          STAGING_TRAEFIK: ${{ secrets.STAGING_TRAEFIK }}
          STAGING_TFVARS: ${{ secrets.STAGING_TFVARS }}
        run: |
          echo $STAGING_DJANGO | base64 -di > .django
          echo $STAGING_TRAEFIK | base64 -di > .traefik
          echo $STAGING_TFVARS | base64 -di > staging.tfvars

      - uses: actions/upload-artifact@v2
        with:
          name: staging-django
          path: .django

      - uses: actions/upload-artifact@v2
        with:
          name: staging-traefik
          path: .traefik

      - uses: actions/upload-artifact@v2
        with:
          name: staging-tfvars
          path: staging.tfvars

  build-and-plan-staging:
    needs: secrets-staging
    runs-on: ubuntu-latest
    if: ${{ github.event.pull_request.base.ref == 'staging' }}
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Create env directories
        run: |
          mkdir -p .envs/.production
          mkdir -p .envs/.staging

      - uses: actions/download-artifact@v2
        with:
          name: production-django
          path: .envs/.production

      - uses: actions/download-artifact@v2
        with:
          name: production-postgres
          path: .envs/.production

      - uses: actions/download-artifact@v2
        with:
          name: production-traefik
          path: .envs/.production

      - uses: actions/download-artifact@v2
        with:
          name: staging-django
          path: .envs/.staging

      - uses: actions/download-artifact@v2
        with:
          name: staging-traefik
          path: .envs/.staging

      - uses: actions/download-artifact@v2
        with:
          name: staging-tfvars
          path: terraform

      - name: Build the Stack
        run:  docker-compose -f production.yml -f staging.yml build

      - name: Run DB Migrations
        run:  docker-compose -f production.yml -f staging.yml run --rm django python manage.py migrate

      - name: Up
        run:  docker-compose -f production.yml -f staging.yml up -d

      - name: Tear down the Stack
        run:  docker-compose -f production.yml -f staging.yml down

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.2.2
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Initialize Terraform
        id: tf-init
        continue-on-error: true
        env:
          TF_WORKSPACE: cookiecutter-django-tfdo-staging
        run: |
          cd terraform
          terraform init -input=false

      - name: Initialize Terraform
        if: steps.tf-init.outcome == 'failure'
        run: |
          cd terraform
          terraform init -input=false

      - name: Select or create workspace
        env:
          # ACHTUNG: do not use `TF_WORKSPACE` env variable name since then the "select"
          # command is ignored
          WORKSPACE: cookiecutter-django-tfdo-staging
        continue-on-error: true
        run: |
          cd terraform
          terraform workspace select $WORKSPACE || terraform workspace new $WORKSPACE

      - name: Download tfvars
        uses: actions/download-artifact@v2
        with:
          name: staging-tfvars
          path: terraform

      - name: Plan Terraform
        id: plan
        continue-on-error: true
        run: |
          cd terraform
          terraform plan -var-file=staging.tfvars -input=false -no-color

      - name: Post Plan to GitHub PR
        uses: mshick/add-pr-comment@v1
        with:
          allow-repeats: true
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ```diff
            ${{ steps.plan.outputs.stdout }}
            ```
