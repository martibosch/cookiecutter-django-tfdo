name: CI

# Enable Buildkit and let compose use it to speed up image building
env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  pull_request:
    branches: [ "main", "staging", "develop" ]
    paths-ignore: [ "docs/**" ]

  push:
    branches: [ "main", "staging", "develop" ]
    paths-ignore: [ "docs/**" ]

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  lint:
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract_branch.outputs.branch }}
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.9"
          cache: pip
          cache-dependency-path: |
            requirements/base.txt
            requirements/local.txt

      - name: Run pre-commit
        uses: pre-commit/action@v2.0.3

      - name: Extract branch name
        shell: bash
        run: echo "::set-output name=branch::$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

  # With no caching at all the entire ci process takes 4m 30s to complete!
  pytest-dev:
    needs: lint
    runs-on: ubuntu-latest
    if: ${{ needs.lint.outputs.branch == 'develop' }}
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Build the Stack
        run:  docker-compose -f local.yml build

      - name: Run DB Migrations
        run:  docker-compose -f local.yml run --rm django python manage.py migrate

      - name: Run Django Tests
        run:  docker-compose -f local.yml run django pytest

      - name: Tear down the Stack
        run:  docker-compose -f local.yml down


  base-secrets:
    needs: lint
    runs-on: ubuntu-latest
    if: ${{ needs.lint.outputs.branch == 'production' || needs.lint.outputs.branch == 'staging' }}
    steps:
      - name: Create folder
        run: mkdir -p .envs/.production
      - name: django env file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: '.django'
          fileDir: '.envs/.production'
          encodedString: ${{ secrets.PRODUCTION_DJANGO_ENV }}
      - name: postgres env file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: '.postgres'
          fileDir: '.envs/.production'
          encodedString: ${{ secrets.PRODUCTION_POSTGRES_ENV }}
      - name: traefik env file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: '.traefik'
          fileDir: '.envs/.production'
          encodedString: ${{ secrets.PRODUCTION_TRAEFIK_ENV }}

  staging-secrets:
    needs: [lint, base-secrets]
    runs-on: ubuntu-latest
    if: ${{ needs.lint.outputs.branch == 'staging' }}
    steps:
      - name: Create folder
        run: mkdir -p .envs/.staging
      - name: django env file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: '.django'
          fileDir: '.envs/.staging'
          encodedString: ${{ secrets.STAGING_DJANGO_ENV }}
      - name: traefik env file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: '.traefik'
          fileDir: '.envs/.staging'
          encodedString: ${{ secrets.STAGING_TRAEFIK_ENV }}
      - name: terraform vars file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'staging.tfvars'
          fileDir: 'terraform'
          encodedString: ${{ secrets.STAGING_TFVARS }}

  production-secrets:
    needs: [lint, base-secrets]
    runs-on: ubuntu-latest
    if: ${{ needs.lint.outputs.branch == 'production' }}
    steps:
      - name: terraform vars file
        uses: timheuer/base64-to-file@v1.1
        with:
          fileName: 'production.tfvars'
          fileDir: 'terraform'
          encodedString: ${{ secrets.PRODUCTION_TFVARS }}

  pytest-staging:
    needs: [lint, staging-secrets]
    runs-on: ubuntu-latest
    if: ${{ needs.lint.outputs.branch == 'staging' }}
    steps:

      - name: Checkout Code Repository
        uses: actions/checkout@v3

      - name: Build the Stack
        run:  docker-compose -f production.yml -f staging.yml build

      - name: Run DB Migrations
        run:  docker-compose -f production.yml -f staging.yml run --rm django python manage.py migrate

      - name: Run Django Tests
        run:  docker-compose -f production.yml -f staging.yml run django pytest

      - name: Tear down the Stack
        run:  docker-compose -f production.yml -f staging.yml down
